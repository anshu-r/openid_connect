<?php

/**
 * @file
 * Install, update and uninstall functions for the OpenID Connect module.
 */

/**
 * Add default config for Facebook and LinkedIn provider.
 */
function openid_connect_update_8101() {
  $config_factory = \Drupal::configFactory();

  $config = $config_factory->getEditable('openid_connect.settings.facebook');
  $config->set('enabled', FALSE);
  $config->set('settings', [
    'client_id' => '',
    'client_secret' => '',
    'api_version' => '',
  ]);
  $config->save(TRUE);

  $config = $config_factory->getEditable('openid_connect.settings.linkedin');
  $config->set('enabled', FALSE);
  $config->set('settings', [
    'client_id' => '',
    'client_secret' => '',
  ]);
  $config->save(TRUE);
}

/**
 * Add default config for GitHub provider.
 */
function openid_connect_update_8102() {
  $config_factory = \Drupal::configFactory();

  $config = $config_factory->getEditable('openid_connect.settings.github');
  $config->set('enabled', FALSE);
  $config->set('settings', [
    'client_id' => '',
    'client_secret' => '',
  ]);
  $config->save(TRUE);
}

/**
 * Update the active config with the registration override value.
 */
function openid_connect_update_8103() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('openid_connect.settings');
  $config->set('override_registration_settings', FALSE);
  $config->save(TRUE);
}

/**
 * Update the active config with the connect existing users value.
 */
function openid_connect_update_8104() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('openid_connect.settings');
  $config->set('connect_existing_users', FALSE);
  $config->save(TRUE);
}

/**
 * Delete duplicate entries in the openid_connect_authmap table.
 */
function openid_connect_update_8105() {
  $database = \Drupal::database();
  // Get the IDs for the duplicate entries.
  $query = $database->select('openid_connect_authmap', 'a1')->fields('a1', ['aid']);
  $query->innerJoin('openid_connect_authmap', 'a2', 'a1.uid = a2.uid AND a1.client_name = a2.client_name AND a1.sub = a2.sub');
  $query->where('a1.aid > a2.aid');
  $aids = $query->distinct()->execute()->fetchAllAssoc('aid');

  if (!empty($aids)) {
    // If duplicates exist, delete them.
    $database->delete('openid_connect_authmap')->condition('aid', array_keys($aids), 'IN')->execute();
  }
}

/**
 * Add default config for Okta provider.
 */
function openid_connect_update_8106() {
  $config_factory = \Drupal::configFactory();

  $config = $config_factory->getEditable('openid_connect.settings.okta');
  $config->set('enabled', FALSE);
  $config->set('settings', [
    'client_id' => '',
    'client_secret' => '',
    'okta_domain' => '',
  ]);
  $config->save(TRUE);
}

/**
 * Convert client configuration objects to configuration entities.
 */
function openid_connect_update_8200() {
  $definitions = \Drupal::service('plugin.manager.openid_connect_client')->getDefinitions();
  $entity_storage = \Drupal::entityTypeManager()->getStorage('openid_connect_client');

  foreach ($definitions as $plugin) {
    $configuration = \Drupal::configFactory()
      ->getEditable('openid_connect.settings.' . $plugin['id']);

    // Only convert configuration where the client id or secret are not empty.
    $settings = $configuration->get('settings');
    if (!empty($settings['client_id']) || !empty($settings['client_secret'])) {
      // Create new configuration entity.
      $entity_storage->create([
        'status' => $configuration->get('enabled'),
        'id' => $plugin['id'],
        'label' => $plugin['label']->getUntranslatedString(),
        'plugin' => $plugin['id'],
        'settings' => $settings,
      ])->save();
    }

    // Delete old configuration object.
    $configuration->delete();
  }
}

/**
 * Update the active config for installations using generic client.
 */
function openid_connect_update_8201() {
  /** @var \Drupal\openid_connect\OpenIDConnectClientEntityInterface[] $clients */
  $clients = \Drupal::entityTypeManager()->getStorage('openid_connect_client')->loadByProperties(['plugin' => 'generic']);

  foreach ($clients as $client) {
    $client->getPlugin()->setConfiguration(['issuer_url' => '']);
    $client->save();
  }
}

/**
 * Add redirect_login to module settings.
 */
function openid_connect_update_8202() {
  $config_factory = \Drupal::configFactory();

  $config = $config_factory->getEditable('openid_connect.settings');
  $config->set('redirect_login', 'user');
  $config->save(TRUE);
}

/**
 * Enable externalauth.
 */
function openid_connect_update_8203() {
  \Drupal::service('module_installer')->install(['externalauth']);
}

/**
 * Move all 'openid_connect_authmap' data to 'authmap'.
 */
function openid_connect_update_8204() {
  $database = \Drupal::database();

  // Get all records and move them to the authmap table.
  $query = $database->select('openid_connect_authmap', 'a')->fields('a');
  $authmap_records = $query->execute()->fetchAllAssoc('aid');

  foreach ($authmap_records as $authmap_record) {
    $database->insert('authmap')
      ->fields(['uid', 'provider', 'authname'])
      ->values([
        'uid' => $authmap_record->uid,
        'provider' => $authmap_record->client_name,
        'authname' => $authmap_record->sub,
      ])->execute();
  }
}

/**
 * Drop the 'openid_connect_authmap' table.
 */
function openid_connect_update_8205() {
  \Drupal::database()->schema()->dropTable('openid_connect_authmap');
}
